@using PersonalFinanceManager;
@page "/accounts"

<PageTitle>Account Manager</PageTitle>

<h1>Account Manager</h1>
_________________________________________________________________<br><br>


@if (ValueNotAllowedException.errorMessage != "" && ValueNotAllowedException.errorMessage != null)
{
    <p>ERROR:@ValueNotAllowedException.errorMessage</p>
}
<button disabled=@errorIsResolved @onclick=ResetErrorMessage>OK</button><br><br>



@* <p role="status">Current number of transactions: @currentCount</p>

    <button class="btn btn-primary" @onclick="IncrementCount">Click me to add a transaction to the transaction count! (Or
    come back later for more functionality)</button> *@

<h4>Add a bank</h4>
<label> Bank Name:<br>
    <input @bind=bankNameInput />
</label>
<br><br>

<label> Routing Number: <br>
    <input @bind=routingNumInput />
</label>
<br><br>

<button class="btn btn-primary" @onclick=AddBank>Add Bank</button><br><br>
_________________________________________________________________<br><br>

<h4>Add an account</h4>
<label> Holder name:<br>
    <input @bind=acctNameInput />
</label>
<br><br>

<label> Account number: <br>
    <input @bind=acctNumInput />
</label>
<br><br>

<button class="btn btn-primary" @onclick=addAccount>Add Account</button><br><br>

_________________________________________________________________<br><br>

@* Add code to let the user select the bank to add to *@

@code
{
    Bank currentBank;

    // ---- Adding a bank ---
    string bankNameInput = "";
    public int routingNumInput;
    int RoutingNumberDisplay;
    string BankNameDisplay = "";

    string acctNameInput = "";
    long acctNumInput = 0;

    void AddBank()
    {
        ValueNotAllowedException.errorMessage = null;
        try
        {
            Bank newBank = new Bank(bankNameInput, routingNumInput);
            currentBank = newBank;
            RoutingNumberDisplay = currentBank.RoutingNumber;
            BankNameDisplay = currentBank.Name;
        }
        catch (ValueNotAllowedException)
        {
            errorIsResolved = false;
        }
        BankNames.Add(currentBank.Name);
        bankNameInput = "";
        routingNumInput = 0;
    }

    // --- Adding an account ---

    void addAccount()
    {
        try
        {
            Bank bank = Bank.bankDictionary[BankNameDisplay];
            try
            {
                bank.AddAccount(new Account(acctNameInput, acctNumInput));
                ValueNotAllowedException.errorMessage = null;
            }
            catch
            {
                errorIsResolved = false;
            }
            acctNameInput = "";
            acctNumInput = 0;
        }
        catch
        {
            errorIsResolved = false;
            ValueNotAllowedException.errorMessage = "No bank selected. Please select or add a bank and try again.";
        }
    }
    // Adding a SubAccount
    int subAcctTypeInput = 0;

    // Adding a transaction
    string memoInput;
    decimal amountInput;
    DateTime dateTimeInput;

    void AddTransaction(Account thisAccount)
    {
        Tuple<string, decimal, DateTime> transaction = new Tuple<string, decimal, DateTime>(memoInput, amountInput,
        dateTimeInput);
    }


    bool errorIsResolved = true;
    void ResetErrorMessage()
    {
        ValueNotAllowedException.errorMessage = "";
        errorIsResolved = true;
    }

}

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    public void testButton()
    {

    }
}

<h2>Current Bank: <b>@BankNameDisplay</b></h2>
<h4>Routing number: @RoutingNumberDisplay</h4>

<button disabled=beginningOfBankNameList @onclick=previousBank>Previous</button>
<button disabled=endOfBankNameList @onclick=nextBank>Next</button><br><br>


@code
{
    // Previous/next buttons
    protected override void OnInitialized()
    {
        try
        {
            Bank.LoadData();
            foreach (var kvPair in Bank.bankDictionary)
            {
                BankNames.Add(kvPair.Key);
            }
            if (BankNames.Count >= 1)
            {
                currentBank = Bank.bankDictionary[BankNames[0]];
                beginningOfBankNameList = true;
                if (BankNames.Count == 1)
                {
                    endOfBankNameList = true;
                }
                else
                {
                    endOfBankNameList = false;
                }

            }
            else
            {
                beginningOfBankNameList = true;
                endOfBankNameList = true;
            }
        }
        catch
        {

        }
    }

    void previousBank()
    {
        if (bankNumber > 0)
        {
            bankNumber--;
            currentBank = Bank.bankDictionary[BankNames[bankNumber]];

            if (bankNumber == 0)
            {
                beginningOfBankNameList = true;
            }
            else
            {
                beginningOfBankNameList = false;
            }

            endOfBankNameList = false;
        }
        else
        {
            beginningOfBankNameList = true;
        }

    }
    void nextBank()
    {
        if (bankNumber < BankNames.Count - 1)
        {
            bankNumber++;
            currentBank = Bank.bankDictionary[BankNames[bankNumber]];

            if (bankNumber == BankNames.Count - 1)
            {
                endOfBankNameList = true;
            }
            else
            {
                endOfBankNameList = false;
            }

            beginningOfBankNameList = false;
        }
        else
        {
            endOfBankNameList = true;
        }
    }


    // Bank List Stuff

    List<string> BankNames = new List<string>();
    bool beginningOfBankNameList;
    bool endOfBankNameList;
    int bankNumber = 0;

}

@if (BankNameDisplay != null && BankNameDisplay != "")
{
    <h3>Accounts in this bank:</h3>
    @foreach (string acctEntry in Bank.GetAccountListFor(currentBank))
    {
        <p>@acctEntry</p>
    }
}
